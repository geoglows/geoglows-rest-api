# CI Pipeline
name: Build 

on: 
  push: 
    branches:
      - "*"
    tags: 
      - "*"

  pull_request:
    branches:
      - "*"

env:
  HELM_REPO_URL: https://eccr.ecmwf.int
  HELM_CHART: ${{ github.workspace }}/helm/gsprestapi
  HELM_REPO_USERNAME: ${{ secrets.HELM_REPO_USERNAME }}
  HELM_KEY_PASSPHRASE: ${{ secrets.HELM_KEY_PASSPHRASE }}
  HELM_REPO_PASSWORD: ${{ secrets.HELM_REPO_PASSWORD }}
  CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  CI_REGISTRY_IMAGE: docker.aquaveo.com/tethys/gsprestapi
  CI_COMMIT_SHORT_SHA: ${{ github.sha }}
  ECCR_USER: ${{ secrets.ECCR_USER }}
  ECCR_PASSWORD: ${{ secrets.ECCR_PASSWORD }}
  KANIKO_IMAGE: gcr.io/kaniko-project/executor:debug
  KANIKO_CONTEXT: /workspace/
  KANIKO_DOCKERFILE: gsp_rest_api/gsp_rest_api/Dockerfile


jobs:
  check-helm: 
      name: Check Helm
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            submodules: false
          
        - name: Ensure HELM_CHART is set
          run: |
            if [[ -z "${HELM_CHART}" ]]; then
              echo "HELM_CHART must be set" >&2
              exit 1
            fi

        - name: Lint Helm Chart
          run: helm lint $HELM_CHART

        - name: Run Check Helm Script
          run: |
            chmod +x ./check_helm_chart
            ./check_helm_chart $HELM_CHART


  update-helm: 
    runs-on: ubuntu-latest
    needs: check-helm
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Ensure Required Variables Are Set
        run: |
          : "${HELM_CHART:?must be set}"
          : "${HELM_KEY_PASSPHRASE:?must be set}"
          : "${HELM_REPO_PASSWORD:?must be set}"

      - name: Run Helm Lint
        run: helm lint $HELM_CHART

      - name: Run Check Helm Script and Upload
        run: |
          chmod +x ./check_helm_chart
          ./check_helm_chart $HELM_CHART --upload


  kaniko-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [tag, stable]
   
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Docker Config
        if: matrix.build_type == 'tag' && startsWith(github.ref, 'refs/tags/') || matrix.build_type == 'stable' && github.ref_name == 'master' || matrix.build_type == 'stable' && github.ref_name == 'ci-cd-pipeline'
        run: |
          echo "{\"auths\":{
            \"$CI_REGISTRY\": {
              \"username\":\"$CI_REGISTRY_USER\", 
              \"password\":\"$CI_REGISTRY_PASSWORD\"
            },
            \"eccr.ecmwf.int/harbor\": {
              \"username\":\"$ECCR_USER\", 
              \"password\":\"$ECCR_PASSWORD\"
            }
          }}" > docker-config.json

      - name: Set Kaniko Build Variables
        if: matrix.build_type == 'tag' && startsWith(github.ref, 'refs/tags/') || matrix.build_type == 'stable' && github.ref_name == 'master' || matrix.build_type == 'stable' && github.ref_name == 'ci-cd-pipeline'
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          if [[ "${{ matrix.build_type }}" == "tag" ]]; then
            echo "KANIKO_ARGS=--destination eccr.ecmwf.int/geoglows_api/geoglows_api:${{ github.ref_name }} --destination eccr.ecmwf.int/geoglows_api/geoglows_api:latest" >> $GITHUB_ENV
          elif [[ "${{ matrix.build_type }}" == "stable" && "${{ github.ref_name }}" == "master" ]]; then
            echo "KANIKO_ARGS=--destination eccr.ecmwf.int/geoglows_api/geoglows_api:stable" >> $GITHUB_ENV
          elif [[ "${{ matrix.build_type }}" == "stable" && "${{ github.ref_name }}" == "ci-cd-pipeline" ]]; then
            echo "KANIKO_ARGS=--destination eccr.ecmwf.int/geoglows_api/geoglows_api:ci-cd-pipeline" >> $GITHUB_ENV
          else
            echo "No valid build type" >&2
            exit 1
          fi

      - name: Verify paths before Kaniko
        shell: bash
        run: |
          echo "GITHUB_WORKSPACE=${{ github.workspace }}"
          echo "KANIKO_CONTEXT=${KANIKO_CONTEXT}"
          echo "KANIKO_DOCKERFILE=${KANIKO_DOCKERFILE}"
          echo "depth 3:"
          find "${{ github.workspace }}" -maxdepth 3 -type f -name Dockerfile -o -name environment.yaml -print
          echo "Check Dockerfile:"
          test -f "${{ github.workspace }}/${KANIKO_DOCKERFILE}" && echo "FOUND Dockerfile" || (echo "MISSING Dockerfile"; exit 1)
          
      - name: Find dockerfile
        shell: bash
        run: find ${{ github.workspace }} -type f -name Dockerfile

      - name: Run Kaniko Build & Push
        if: matrix.build_type == 'tag' && startsWith(github.ref, 'refs/tags/') || matrix.build_type == 'stable' && github.ref_name == 'master' || matrix.build_type == 'stable' && github.ref_name == 'ci-cd-pipeline'
        run: |
          [[ -z "${KANIKO_DOCKERFILE}" ]] && echo "KANIKO_DOCKERFILE must be set" && exit 1
          [[ -z "${KANIKO_CONTEXT}" ]] && echo "KANIKO_CONTEXT must be set" && exit 1
          [[ -z "${KANIKO_ARGS}" ]] && echo "KANIKO_ARGS must be set" && exit 1

          # Combine final args
          KANIKO_ARGS="--context ${KANIKO_CONTEXT} --dockerfile ${KANIKO_DOCKERFILE} ${KANIKO_ARGS} --cache=true --cache-repo ${CI_REGISTRY_IMAGE}/cache --force"

          echo "Running Kaniko with:"
          echo "$KANIKO_ARGS"

          docker run --rm \
            -v "${{ github.workspace }}:/workspace" \
            -v "${{ github.workspace }}/docker-config.json:/kaniko/.docker/config.json" \
            ${{ env.KANIKO_IMAGE }} \
            $KANIKO_ARGS

      