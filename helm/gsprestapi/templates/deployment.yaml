apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gsprestapi.fullname" . }}
  labels:
{{ include "gsprestapi.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "gsprestapi.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "gsprestapi.name" . }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 6 }}
    {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: "AWS_ACCESS_KEY_ID"
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: aws-auth
        - name: "AWS_SECRET_ACCESS_KEY"
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: aws-auth
        - name: "AWS_REGION"
          valueFrom:
            secretKeyRef:
              key: AWS_REGION
              name: aws-auth
        - name: "AWS_LOG_GROUP_NAME"
          valueFrom:
            secretKeyRef:
              key: AWS_LOG_GROUP_NAME
              name: aws-auth
        - name: "AWS_LOG_STREAM_NAME"
          valueFrom:
            secretKeyRef:
              key: AWS_LOG_STREAM_NAME
              name: aws-auth

        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: Host
              value: localhost
          timeoutSeconds: 15
          initialDelaySeconds: 300
        readinessProbe:
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: Host
              value: localhost
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        {{- range $key, $value := .Values.persistentVolumes }}
        - mountPath: {{ $value.mountPath }}
          name: {{ $key }}
        {{- end }}
      volumes:
      {{- range $key, $value := .Values.persistentVolumes }}
      - name: {{ $key }}
        persistentVolumeClaim:
          claimName: {{ $value.claimName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
